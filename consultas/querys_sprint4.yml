// 1. Mostrar todos los documentos en la colección Restaurants
db.restaurants.find({})

// 2. Mostrar restaurant_id, name, borough y cuisine de todos los documentos
db.restaurants.find({}, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })

// 3. Mostrar restaurant_id, name, borough y cuisine excluyendo el campo _id
db.restaurants.find({}, { _id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })

// 4. Mostrar restaurant_id, name, borough y zip code excluyendo el campo _id
db.restaurants.find({}, { _id: 0, restaurant_id: 1, name: 1, borough: 1, "address.zipcode": 1 })

// 5. Mostrar todos los restaurantes que están en el Bronx
db.restaurants.find({ borough: "Bronx" })

// 6. Mostrar los primeros 5 restaurantes que están en el Bronx
db.restaurants.find({ borough: "Bronx" }).limit(5)

// 7. Mostrar los 5 restaurantes después de saltar los primeros 5 en el Bronx
db.restaurants.find({ borough: "Bronx" }).skip(5).limit(5)

// 8. Encontrar restaurantes con algún score mayor de 90
db.restaurants.find({ "grades.score": { $gt: 90 } })

// 9. Encontrar restaurantes con un score mayor que 80 pero menor que 100
db.restaurants.find({ "grades.score": { $gt: 80, $lt: 100 } })

// 10. Encontrar restaurantes con longitud inferior a -95.754168
db.restaurants.find({ "address.coord.0": { $lt: -95.754168 } })

// 11. Encontrar restaurantes que no cocinen 'American', con score superior a 70 y longitud menor a -65.754168
db.restaurants.find({ cuisine: { $ne: "American" }, "grades.score": { $gt: 70 }, "address.coord.0": { $lt: -65.754168 } })

// 12. Encontrar restaurantes que no cocinen 'American', con score superior a 70 y longitud menor a -65.754168 sin usar $and
db.restaurants.find({ cuisine: { $ne: "American" }, "grades.score": { $gt: 70 }, "address.coord.0": { $lt: -65.754168 } })

// 13. Encontrar restaurantes que no cocinen 'American', tengan nota 'A' y no pertenezcan a Brooklyn, ordenados por cuisine de forma descendente
db.restaurants.find({ cuisine: { $ne: "American" }, borough: { $ne: "Brooklyn" }, "grades.grade": "A" }).sort({ cuisine: -1 })

// 14. Encontrar restaurantes cuyo nombre empiece con 'Wil'
db.restaurants.find({ name: { $regex: /^Wil/ } }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })

// 15. Encontrar restaurantes cuyo nombre termine en 'ces'
db.restaurants.find({ name: { $regex: /ces$/ } }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })

// 16. Encontrar restaurantes cuyo nombre contenga 'Reg'
db.restaurants.find({ name: { $regex: /Reg/ } }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })

// 17. Encontrar restaurantes en el Bronx que sirvan comida Americana o China
db.restaurants.find({ borough: "Bronx", cuisine: { $in: ["American", "Chinese"] } })

// 18. Encontrar restaurantes en Staten Island, Queens, Bronx o Brooklyn
db.restaurants.find({ borough: { $in: ["Staten Island", "Queens", "Bronx", "Brooklyn"] } }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })

// 19. Encontrar restaurantes que no pertenezcan a Staten Island, Queens, Bronx o Brooklyn
db.restaurants.find({ borough: { $nin: ["Staten Island", "Queens", "Bronx", "Brooklyn"] } }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })

// 20. Encontrar restaurantes con un score menor de 10
db.restaurants.find({ "grades.score": { $lt: 10 } }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })

// 21. Encontrar restaurantes que sirvan mariscos, excepto Americanos, Chinos o cuyo nombre empiece con 'Wil'
db.restaurants.find({ cuisine: "Seafood", cuisine: { $nin: ["American", "Chinese"] }, name: { $not: /^Wil/ } })

// 22. Encontrar restaurantes con nota 'A' y score 11 con fecha ISODate
db.restaurants.find({ "grades.grade": "A", "grades.score": 11, "grades.date": ISODate("2014-08-11T00:00:00Z") }, { restaurant_id: 1, name: 1, grades: 1 })

// 23. Encontrar restaurantes donde el segundo elemento de grades tenga nota 'A', score de 9 y fecha ISODate
db.restaurants.find({ "grades.1.grade": "A", "grades.1.score": 9, "grades.1.date": ISODate("2014-08-11T00:00:00Z") }, { restaurant_id: 1, name: 1, grades: 1 })

// 24. Encontrar restaurantes cuya segunda coordenada esté entre 42 y 52
db.restaurants.find({ "address.coord.1": { $gt: 42, $lt: 52 } }, { restaurant_id: 1, name: 1, address: 1, "address.coord": 1 })

// 25. Ordenar los restaurantes por nombre en orden ascendente
db.restaurants.find({}).sort({ name: 1 })

// 26. Ordenar los restaurantes por nombre en orden descendente
db.restaurants.find({}).sort({ name: -1 })

// 27. Ordenar los restaurantes por cuisine en orden ascendente y por borough en orden descendente
db.restaurants.find({}).sort({ cuisine: 1, borough: -1 })

// 28. Verificar si las direcciones contienen la calle
db.restaurants.find({ "address.street": { $exists: true } })

// 29. Seleccionar documentos donde el valor de coord es de tipo Double
db.restaurants.find({ "address.coord": { $type: "double" } })

// 30. Encontrar restaurantes con score divisible por 7 sin residuo
db.restaurants.find({ "grades.score": { $mod: [7, 0] } }, { restaurant_id: 1, name: 1, "grades.grade": 1 })

// 31. Encontrar restaurantes cuyo nombre contenga 'mon' en cualquier lugar
db.restaurants.find({ name: { $regex: /mon/i } }, { name: 1, borough: 1, "address.coord.0": 1, "address.coord.1": 1, cuisine: 1 })

// 32. Encontrar restaurantes cuyo nombre empiece con 'Mad'
db.restaurants.find({ name: { $regex: /^Mad/ } }, { name: 1, borough: 1, "address.coord.0": 1, "address.coord.1": 1, cuisine: 1 })
